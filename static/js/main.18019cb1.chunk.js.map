{"version":3,"sources":["square.jsx","Restart.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","value","onClick","className","Restart","App","useState","Array","fill","squares","setSquares","isXNext","setIsXNext","nextSymbol","winner","possibleLines","i","length","a","b","c","calculateWinner","renderSquare","nextSquares","slice","isBoardFull","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAWeA,MAPf,YAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACvB,OACE,4BAAQC,UAAU,SAASD,QAASA,GACjCD,ICLQ,SAASG,EAAT,GAA+B,IAAZF,EAAW,EAAXA,QAChC,OACE,4BAAQC,UAAU,UAAUD,QAASA,GAArC,cCyGWG,MAxGf,WAAgB,IAAD,EACiBC,mBAASC,MAAM,GAAGC,KAAK,OADxC,mBACNC,EADM,KACGC,EADH,OAEiBJ,oBAAS,GAF1B,mBAENK,EAFM,KAEGC,EAFH,KAGPC,EAAaF,EAAU,IAAM,IAC7BG,EAsCN,SAAyBL,GAYvB,IAXA,IAAMM,EAAgB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAI,EAAGA,EAAID,EAAcE,OAAQD,IAAK,CAAC,IAAD,cAC3BD,EAAcC,GADa,GACtCE,EADsC,KACnCC,EADmC,KAChCC,EADgC,KAE7C,GACEX,EAAQS,IACRT,EAAQS,KAAOT,EAAQU,IACvBV,EAAQS,KAAOT,EAAQW,GAEvB,OAAOX,EAAQS,GAGnB,OAAO,KA5DMG,CAAgBZ,GAE/B,SAASa,EAAaN,GACpB,OACE,kBAAC,EAAD,CACEf,MAAOQ,EAAQO,GACfd,QAAS,WACP,GAAkB,MAAdO,EAAQO,IAAwB,MAAVF,EAA1B,CAGA,IAAMS,EAAcd,EAAQe,QAC5BD,EAAYP,GAAKH,EACjBH,EAAWa,GAEXX,GAAYD,OA2DpB,OACE,yBAAKR,UAAU,aACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,aACZmB,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKnB,UAAU,aACZmB,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKnB,UAAU,aACZmB,EAAa,GACbA,EAAa,GACbA,EAAa,KAGlB,yBAAKnB,UAAU,aAzEfW,EACK,WAAaA,EAQxB,SAAqBL,GACnB,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAQQ,OAAQD,IAClC,GAAkB,MAAdP,EAAQO,GACV,OAAO,EAGX,OAAO,EAbIS,CAAYhB,GACd,QAEA,gBAAkBI,GAqEvB,yBAAKV,UAAU,kBA7BjB,kBAACC,EAAD,CACEF,QAAS,WACPQ,EAAWH,MAAM,GAAGC,KAAK,OACzBI,GAAW,UCjEDc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.18019cb1.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./App.css\";\n\nfunction Square({ value, onClick }) {\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\nexport default Square;\n","import React from \"react\";\nimport \"./App.css\";\nexport default function Restart({ onClick }) {\n  return (\n    <button className=\"restart\" onClick={onClick}>\n      Play again\n    </button>\n  );\n}\n","import React, { useState } from \"react\";\nimport Square from \"./square\";\nimport Restart from \"./Restart\";\nimport \"./App.css\";\n\nfunction App() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [isXNext, setIsXNext] = useState(true);\n  const nextSymbol = isXNext ? \"X\" : \"O\";\n  const winner = calculateWinner(squares);\n\n  function renderSquare(i) {\n    return (\n      <Square\n        value={squares[i]}\n        onClick={() => {\n          if (squares[i] != null || winner != null) {\n            return;\n          }\n          const nextSquares = squares.slice();\n          nextSquares[i] = nextSymbol;\n          setSquares(nextSquares);\n\n          setIsXNext(!isXNext); // toggle turns\n        }}\n      />\n    );\n  }\n  function getStatus() {\n    if (winner) {\n      return \"Winner: \" + winner;\n    } else if (isBoardFull(squares)) {\n      return \"Draw!\";\n    } else {\n      return \"Next player: \" + nextSymbol;\n    }\n  }\n\n  function isBoardFull(squares) {\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i] == null) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function calculateWinner(squares) {\n    const possibleLines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    // go over all possibly winning lines and check if they consist of only X's/only O's\n    for (let i = 0; i < possibleLines.length; i++) {\n      const [a, b, c] = possibleLines[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n  function renderRestartButton() {\n    return (\n      <Restart\n        onClick={() => {\n          setSquares(Array(9).fill(null));\n          setIsXNext(true);\n        }}\n      />\n    );\n  }\n  return (\n    <div className=\"container\">\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <div className=\"board-row\">\n            {renderSquare(0)}\n            {renderSquare(1)}\n            {renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {renderSquare(3)}\n            {renderSquare(4)}\n            {renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {renderSquare(6)}\n            {renderSquare(7)}\n            {renderSquare(8)}\n          </div>\n        </div>\n        <div className=\"game-info\">{getStatus()}</div>\n        <div className=\"restart-button\">{renderRestartButton()}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}